#!/usr/bin/env node

/**
 * Module dependencies.
 */
const { app, server, io } = require('../app');
const connectDB = require('../db/connectDB');
const path = require('path');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '5001');
app.set('port', port);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(`❌ ${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`❌ ${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    
    console.log('📁 Serving static files for /uploads from:', path.join(__dirname, '../uploads'));
    console.log(`✅ Server is running on http://127.0.0.1:${addr.port}`);
    console.log(`🔌 Socket.IO enabled`);
}

/**
 * Connect to database and start server
 */
async function startServer() {
    try {
        await connectDB();
        console.log('✅ Database connected successfully.');
        
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    } catch (error) {
        console.error('❌ Failed to start server:', error);
        process.exit(1);
    }
}

/**
 * Handle graceful shutdown
 */
function gracefulShutdown(signal) {
    console.log(`\n⚠️ ${signal} signal received: closing HTTP server`);
    
    server.close(() => {
        console.log('✅ HTTP server closed');
        
        io.close(() => {
            console.log('✅ Socket.IO connections closed');
            process.exit(0);
        });
    });
    
    // Force close after 10s
    setTimeout(() => {
        console.error('❌ Forcing server shutdown');
        process.exit(1);
    }, 10000);
}

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

startServer();
