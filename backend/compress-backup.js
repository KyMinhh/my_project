#!/usr/bin/env node

/**
 * Database Compression Script
 * 
 * S·ª≠ d·ª•ng: node compress-backup.js
 * 
 * Script n√†y s·∫Ω n√©n file backup th√†nh .zip
 */

const fs = require('fs');
const path = require('path');
const archiver = require('archiver');

const log = {
  success: (msg) => console.log(`‚úÖ ${msg}`),
  error: (msg) => console.log(`‚ùå ${msg}`),
  info: (msg) => console.log(`‚ÑπÔ∏è  ${msg}`),
};

const compressBackup = async () => {
  try {
    const backupDir = path.join(__dirname, 'backups');
    
    if (!fs.existsSync(backupDir)) {
      log.error('Th∆∞ m·ª•c backups kh√¥ng t·ªìn t·∫°i!');
      process.exit(1);
    }

    // L·∫•y file backup m·ªõi nh·∫•t
    const files = fs.readdirSync(backupDir)
      .filter(f => f.startsWith('database_backup_') && f.endsWith('.json'))
      .sort()
      .reverse();

    if (files.length === 0) {
      log.error('Kh√¥ng t√¨m th·∫•y file backup!');
      process.exit(1);
    }

    const latestBackup = files[0];
    const backupPath = path.join(backupDir, latestBackup);
    const zipPath = path.join(backupDir, latestBackup.replace('.json', '.zip'));

    log.info(`ƒêang n√©n: ${latestBackup}`);

    // T·∫°o file zip
    const output = fs.createWriteStream(zipPath);
    const archive = archiver('zip', { zlib: { level: 9 } });

    return new Promise((resolve, reject) => {
      output.on('close', () => {
        const originalSize = (fs.statSync(backupPath).size / 1024 / 1024).toFixed(2);
        const zipSize = (fs.statSync(zipPath).size / 1024 / 1024).toFixed(2);
        
        log.success(`N√©n th√†nh c√¥ng!`);
        console.log(`
  üìÅ File g·ªëc: ${originalSize} MB
  üì¶ File n√©n: ${zipSize} MB
  ‚ú® T·ª∑ l·ªá n√©n: ${((1 - zipSize / originalSize) * 100).toFixed(1)}%
  
  üìç V·ªã tr√≠: ${zipPath}
        `);
        resolve();
      });

      archive.on('error', (err) => {
        log.error(`L·ªói n√©n: ${err.message}`);
        reject(err);
      });

      archive.pipe(output);
      archive.file(backupPath, { name: latestBackup });
      archive.finalize();
    });

  } catch (error) {
    log.error(`L·ªói: ${error.message}`);
    process.exit(1);
  }
};

compressBackup();
