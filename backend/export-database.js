#!/usr/bin/env node

/**
 * Database Export Script
 * 
 * S·ª≠ d·ª•ng: node export-database.js
 * 
 * Script n√†y s·∫Ω export to√†n b·ªô database MongoDB th√†nh file JSON
 * K·∫øt qu·∫£: database_backup_TIMESTAMP.json
 */

const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
};

const log = {
  success: (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`),
  info: (msg) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`),
  warn: (msg) => console.log(`${colors.yellow}‚ö†Ô∏è  ${msg}${colors.reset}`),
  title: (msg) => console.log(`\n${colors.bright}${colors.blue}${msg}${colors.reset}\n`),
};

const exportDatabase = async () => {
  try {
    log.title('üóÑÔ∏è  MongoDB Database Export');

    // 1. K·∫øt n·ªëi MongoDB
    log.info('ƒêang k·∫øt n·ªëi t·ªõi MongoDB...');
    
    if (!process.env.MONGO_URI) {
      throw new Error('MONGO_URI kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong file .env');
    }

    await mongoose.connect(process.env.MONGO_URI);
    log.success(`K·∫øt n·ªëi th√†nh c√¥ng t·ªõi: ${process.env.MONGO_URI.split('@')[1]}`);

    // 2. L·∫•y danh s√°ch t·∫•t c·∫£ collections
    log.info('ƒêang l·∫•y danh s√°ch collections...');
    const db = mongoose.connection.db;
    const collections = await db.listCollections().toArray();
    
    if (collections.length === 0) {
      log.warn('Kh√¥ng t√¨m th·∫•y collections n√†o!');
      await mongoose.connection.close();
      return;
    }

    log.success(`T√¨m th·∫•y ${collections.length} collections`);

    // 3. Export t·ª´ng collection
    const backupData = {};
    let totalDocuments = 0;

    for (const collection of collections) {
      const collectionName = collection.name;
      
      // Skip system collections
      if (collectionName.startsWith('system.')) {
        continue;
      }

      process.stdout.write(`  üì¶ ƒêang export "${collectionName}"... `);

      try {
        const documents = await db.collection(collectionName).find({}).toArray();
        backupData[collectionName] = documents;
        totalDocuments += documents.length;
        
        console.log(`${colors.green}[${documents.length} documents]${colors.reset}`);
      } catch (error) {
        console.log(`${colors.red}[L·ªói: ${error.message}]${colors.reset}`);
      }
    }

    // 4. L∆∞u v√†o file JSON
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('Z')[0];
    const backupDir = path.join(__dirname, 'backups');
    
    // T·∫°o folder backups n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
    }

    const filename = path.join(backupDir, `database_backup_${timestamp}.json`);
    
    log.info(`ƒêang l∆∞u d·ªØ li·ªáu...`);
    fs.writeFileSync(filename, JSON.stringify(backupData, null, 2), 'utf-8');

    // 5. Th·ªëng k√™
    const fileSize = (fs.statSync(filename).size / 1024 / 1024).toFixed(2);

    log.title('‚ú® Export Th√†nh C√¥ng!');
    console.log(`
  üìÅ File ƒë∆∞·ª£c l∆∞u t·∫°i: ${filename}
  üìä T·ªïng s·ªë documents: ${totalDocuments}
  üíæ K√≠ch th∆∞·ªõc file: ${fileSize} MB
  ‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}

  üí° Ti·∫øp theo:
     - Ki·ªÉm tra file: backups/database_backup_*.json
     - N√©n file: zip database_backup_*.json (n·∫øu c·∫ßn)
     - G·ª≠i gi·∫£ng vi√™n ho·∫∑c backup
    `);

    // 6. T·∫°o file metadata
    const metadata = {
      exportDate: new Date().toISOString(),
      mongoUri: process.env.MONGO_URI.split('@')[1],
      totalCollections: Object.keys(backupData).length,
      totalDocuments: totalDocuments,
      collections: Object.keys(backupData).map(name => ({
        name,
        documentCount: backupData[name].length
      }))
    };

    const metadataFile = path.join(backupDir, `metadata_${timestamp}.json`);
    fs.writeFileSync(metadataFile, JSON.stringify(metadata, null, 2), 'utf-8');
    log.info(`Metadata ƒë∆∞·ª£c l∆∞u t·∫°i: ${metadataFile}`);

    // 7. ƒê√≥ng k·∫øt n·ªëi
    await mongoose.connection.close();
    log.success('K·∫øt n·ªëi MongoDB ƒë√£ ƒë√≥ng');

  } catch (error) {
    log.error(`L·ªói: ${error.message}`);
    console.error(error);
    process.exit(1);
  }
};

// Ch·∫°y export
exportDatabase();
